use extendr_api::prelude::*;

/// Return string `"Hello world!"` to R.
/// @export
#[extendr]
fn hello_world() -> &'static str {
    "Hello world!"
}

/// dirtylapply replicates R's lapply: it takes an R list and an R function,
/// applies the function to each element, and returns a new list of results.
#[extendr]
fn dirtylapply(list: List, func: Robj) -> List {
    // Iterate over each element of the list.
    // For each element, call the R function with that element as argument.
    let results: Vec<Robj> = list
        .iter()
        .map(|(_name, _value)| R!(func.clone(), _value.clone()).unwrap()
        .collect();

    List::from_values(results)
}
// Macro to generate exports.
// This ensures exported functions are registered with R.
// See corresponding C code in `entrypoint.c`.
extendr_module! {
    mod dirtyparallel;
    fn hello_world;
    fn dirtylapply;
}
