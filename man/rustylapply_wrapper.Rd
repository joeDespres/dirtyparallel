% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rustapply.R
\name{rustylapply_wrapper}
\alias{rustylapply_wrapper}
\title{Wrapper for \code{rustylapply}}
\usage{
rustylapply_wrapper(iterator, func, ...)
}
\arguments{
\item{iterator}{A list-like object to iterate over.}

\item{func}{An R function to apply to each element of the iterator.}

\item{...}{Additional arguments passed to \code{func}. These will be captured
and passed as a \code{varargs} list into \code{rustylapply}.}
}
\value{
A list of results, with one element per item in the iterator.
}
\description{
A thin wrapper around \code{rustylapply()} that enables applying an R function
across an iterator using potentially unsafe parallelism via Rust threads.
This wrapper forwards additional arguments to the applied function, making
it easier to use from R.
}
\details{
This function is part of an experimental setup that calls R functions from
multiple Rust threads without regard for thread-safety. It is \emph{not safe}
and should be used only for exploratory or benchmarking purposes, not in
production. The goal is to prototype dirty parallelism and investigate
performance characteristics when disregarding R's single-threaded
constraints.
}
