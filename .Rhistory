})
crossprod_with_scale <- \(X, scale) {
crossprod(X) * scale
}
lapply(mat_list,
crossprod_with_scale,
scale = 9)
rustylapply(list = mat_list,
func = crossprod,
scale = 9)
})
crossprod_with_scale <- \(X, scale) {
crossprod(X) * scale
}
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply(list = mat_list, func = crossprod, scale = 9)
)
call_rust_with_varargs(list("hi", "mom"))
rebuild()
rebuild()
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(list = mat_list, func = crossprod, scale = 9)
)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(mat_list, crossprod, scale = 9)
)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(mat_list, crossprod, scale = 9)
)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(mat_list, crossprod, scale = 9)
)
rustylapply_wrapper(mat_list, crossprod, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(mat_list, crossprod, scale = 9)
)
rustylapply_wrapper(mat_list, crossprod, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod, scale = 9)
)
rustylapply_wrapper(iterator = mat_list, func = crossprod, scale = 9)
crossprod<- \(.x) {
crossprod(x = .x)
}
build()
rebuild()
rustylapply_wrapper(mat_list, crossprod, scale = 9)
rustylapply_wrapper(mat_list, crossprod, scale = 9)
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
)
rustylapply_wrapper(iterator = mat_list, func = crossprod, scale = 9)
crossprod
crossprod_with_scale <- \(X, scale) {
crossprod(X) * scale
}
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
rebuild()
rustylapply_wrapper(mat_list, crossprod, scale = 9)
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
rebuild()
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
out <-  rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
rebuild()
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
o
rebuild()
devtools::load_all(".")
rebuild()
rebuild()
mat_list <- lapply(1:10, \(i) {
nrow <- 10
ncol <- 10
matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)
})
crossprod_with_scale <- \(X, scale) {
crossprod(.x = X) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
crossprod
crossprod_with_scale <- \(X, scale) {
crossprod(x = X) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
crossprod_with_scale
rebuild()
mat_list <- lapply(1:10, \(i) {
nrow <- 10
ncol <- 10
matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)
})
crossprod_with_scale <- \(X, scale) {
crossprod(x = X) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
crossprod_with_scale <- \(x, scale) {
crossprod(x = x) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
)
out
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
)
test_that("varargs can get passed", {
mat_list <- lapply(1:10, \(i) {
nrow <- 10
ncol <- 10
matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)
})
crossprod_with_scale <- \(x, scale) {
crossprod(x = x) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
)
})
rebuild()
test_that("varargs can get passed", {
mat_list <- lapply(1:10, \(i) {
nrow <- 10
ncol <- 10
matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)
})
crossprod_with_scale <- \(x, scale) {
crossprod(x = x) * scale
}
out <- rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
expect_equal(
lapply(mat_list, crossprod_with_scale, scale = 9),
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9)
)
})
rebuild()
rebuild()
rebuild()
crossprod_with_scale <- \(x, scale, thirtyfive) {
(cor(x = x) * scale) + thirtyfive
}
rustylapply(list = list(a = 1, b = 2, c = 3),
func = \(value) value * 100)
rustylapply
expect_equal(list(100, 200, 300),
rustylapply(list = list(a = 1, b = 2, c = 3),
func = \(value) value * 100, varargs = NULL)
)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(list = list(a = 1, b = 2, c = 3),
func = \(value) value * 100)
)
rustylapply_wrapper
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(value) value * 100)
)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(value) value * 100)
)
mat_list <- lapply(1:10, \(i) {
nrow <- 10
ncol <- 10
matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)
})
expect_no_error(
rustylapply_wrapper(list = mat_list,
func = \(value) value %*% value)
)
expect_no_error(
rustylapply_wrapper(iterator = mat_list,
func = \(value) value %*% value)
)
expect_no_error(
rustylapply_wrapper(iterator = mat_list,
func = \(x) x %*% x)
)
expect_equal(
lapply(mat_list, crossprod),
rustylapply(mat_list, crossprod)
)
expect_equal(
lapply(mat_list, crossprod),
rustylapply_wrapper(mat_list, crossprod)
)
devtools::load_all()
rebuild()
rustylapply_wrapper(iterator = mat_list, func = crossprod_with_scale, scale = 9, thirtyfive = 35)
all_args_named()
all_args_named
list(...)
names(args)
args <- list(...)
arg_names <- names(args)
arg_names
all(nzchar(arg_names))
all_args_named()
args <- list(...)
args
arg_names <- names(args)
arg_names
args <- rlang::call_args(match = TRUE)
args <- rlang::call_args(match = TRUE)
args
rlang::call_args
match = TRUE
args <- rlang::call_args()
args
all_args_named <- function() {
args <- rlang::call_args(match = TRUE)
all(nzchar(names(args)))
}
all_args_named()
all_args_named <- function() {
args <- rlang::call_args()
all(nzchar(names(args)))
}
all_args_named()
rlang::call_args
?rlang::call_args
match.call()
as.list(match.call())[-1]
args <- as.list(match.call())[-1]
all(nzchar(names(args)))
as.list(match.call())[-1]
all_args_named <- function() {
args <- as.list(match.call())[-1]
all(nzchar(names(args)))
}
all_args_named()
devtools::load_all(".")
expect_error(.f("hi mom"))
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"))
.f("hi mom")
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
expect_no_error(.f(.x = "hi mom"))
expect_no_error(.f(.x = "hi mom"))
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
.f <- \(.x) {
assert_all_args_named()
}
expect_no_error(.f(.x = "hi mom"))
assert_all_args_named()
devtools::load_all(".")
.f <- \(.x) {
assert_all_args_named()
}
expect_no_error(.f(.x = "hi mom"))
as.list(match.call())[-1]
.f <- \(.x) {
assert_all_args_named()
}
.f("hi mom")
devtools::load_all(".")
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
.f <- \(.x) {
assert_all_args_named()
}
assert_all_args_named()
.f <- \(.x) {
assert_all_args_named()
}
expect_no_error(.f(.x = "hi mom"))
.f(.x = "hi mom")
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
devtools::load_all(".")
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
as.list(match.call(definition = sys.function(-1), call = sys.call(-1)))[-1]
call_args <- as.list(match.call(definition = sys.function(-1), call = sys.call(-1)))[-1]
arg_names <- names(call_args)
arg_names
is.null(arg_names) || any(!nzchar(arg_names))
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
call_args <- as.list(match.call(definition = sys.function(-1), call = sys.call(-1)))[-1]
arg_names <- names(call_args)
if (is.null(arg_names) || any(!nzchar(arg_names))) {
stop(
"All arguments to this function must be named.\n",
"We're doing some crazy parallel stuff under the hood, and unnamed args\n",
"could lead to chaos. Please name all your arguments explicitly."
)
}
devtools::load_all(".")
test_that("", {
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
.f <- \(.x) {
assert_all_args_named()
}
expect_no_error(.f(.x = "hi mom"))
})
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
assert_all_args_named
test_that("", {
.f <- \(.x) {
assert_all_args_named()
}
expect_error(.f("hi mom"), regexp = "All arguments to this function must be named.")
.f <- \(.x) {
assert_all_args_named()
}
expect_no_error(.f(.x = "hi mom"))
})
devtools::load_all(".")
devtools::load_all(".")
expect_equal(
lapply(mat_list, crossprod),
rustylapply_wrapper(iterator = mat_list, func = crossprod)
)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
devtools::load_all(".")
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
)
devtools::load_all(".")
devtools::load_all(".")
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
devtools::load_all(".")
devtools::load_all(".")
rebuild()
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
rebuild()
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
devtools::load_all(".")
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
func()
func
rebuild()
.f <- \(y) { }
rename_first_arg(.f)
expect_equal(args(changed_f), ".x")
.f <- \(y) { }
changed_f <- rename_first_arg(.f)
expect_equal(args(changed_f), "x")
changed_f
args(changed_f)
changed_f <- rename_first_arg(.f)
.f <- \(y) { }
changed_f <- rename_first_arg(.f)
.f
rename_first_arg(.f)
changed_f <- rename_first_arg(.f)
.f <- \(y) {
print(y)
}
changed_f
.f <- \(y) {
print(y)
}
changed_f <- rename_first_arg(.f)
changed_f
?force()
.f <- \(y) {
print(y)
}
wrap_first_arg_unname(.f)
wrap_first_arg_unname(.f)
wrap_first_arg_unname <- function(f) {
force(f)
function(...) {
args <- list(...)
if(length(args) > 0) {
# Remove the name from the first argument
names(args)[1] <- ""
}
do.call(f, args)
}
}
wrap_first_arg_unname(.f)
args <- wrap_first_arg_unname(.f)
devtools::load_all(".")
.f <- \(y) {
print(y)
}
args <- wrap_first_arg_unname(.f)
<- wrap_first_arg_unname(.f)
args
args <- wrap_first_arg_unname(.f)
changed_f <- rename_first_arg(.f)
args
args
args <- wrap_first_arg_unname(.f)
.f <- \(y) {
print(y)
}
args <- wrap_first_arg_unname(.f)
args <- wrap_first_arg_unname(.f)
args
args(.f)
.f <- \(y) {
print(y)
}
args(.f)
.f <- \(y) {
print(y)
}
args(.f)
args(.f)[1]
.f <- \(y) {
print(y)
}
args(.f)[1]
formals(.f)
wrap_first_arg_as_x(.f)
devtools::load_all(".")
.f <- \(y) {
print(y)
}
wrap_first_arg_as_x(.f)
formals(f_x)
f_x <- wrap_first_arg_as_x(.f)
formals(f_x)
formals(f_x)[1]
formals(f_x)[[1]]
formals(f_x)
formals(f_x) |> names()
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
devtools::load_all(".")
devtools::load_all(".")
f_x <- wrap_first_arg_as_x(.f)
expect_equal(names(formals(f_x)), c("x", "..."))
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
)
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
devtools::load_all(".")
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
)
wrap_first_arg_as_x(func)
func
devtools::load_all(".")
expect_equal(list(100, 200, 300),
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(x) x * 100)
)
wrap_first_arg_as_x(func)
rustylapply(list = iterator, func = f_x, varargs = varargs)
rustylapply_wrapper(iterator = list(a = 1, b = 2, c = 3),
func = \(y) y * 100)
wrap_first_arg_as_x(func)
f_x <- wrap_first_arg_as_x(func)
rustylapply(list = iterator, func = f_x, varargs = varargs)
func
usethis::use_mit_license()
